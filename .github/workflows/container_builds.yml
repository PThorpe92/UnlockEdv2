name: Container ECR build + deploy
on:
  push:
    branches:
      - main
      - demo

permissions:
  id-token: write
  contents: read

jobs:
  setup-env:
    if: github.repository == 'UnlockedLabs/UnlockEdv2' || github.repository == 'PThorpe92/UnlockEdv2'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.determine-changed-services.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 3

      - id: determine-changed-services
        run: |
            #!/bin/bash
            set -e
            matrix_include=()
            branch="${GITHUB_REF##*/}"

            check_and_add_service() {
              local service_path=$1
              local service_name=$2
              if git diff --name-only HEAD~1 | grep "^$service_path/" >/dev/null; then
                matrix_include+=("{\"service\": \"$service_name\", \"branch\": \"$branch\"}")
              fi
            }

            check_and_add_service "frontend" "frontend"
            check_and_add_service "backend" "backend"
            check_and_add_service "provider-middleware" "middleware"
            check_and_add_service "backend/tasks" "crontasks"

            if [ ${#matrix_include[@]} -eq 0 ]; then
              echo "No changes detected in any service."
              echo "matrix={\"include\": []}" >> $GITHUB_OUTPUT
            else
              echo "matrix={\"include\": [${matrix_include[*]}]}" >> $GITHUB_OUTPUT
            fi

      - name: Debug outputs
        run: |
          echo "Matrix: ${{ steps.determine-changed-services.outputs.matrix }}"

  build-and-deploy:
    if: github.repository == 'UnlockedLabs/UnlockEdv2' || github.repository == 'PThorpe92/UnlockEdv2'
    needs: setup-env
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.setup-env.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          aws-region: us-west-2
          mask-aws-account-id: true

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: v1.21.0

      - name: Set up Kubeconfig
        run: |
          mkdir -p $HOME/.kube && touch $HOME/.kube/config
          if [ "${{ matrix.branch }}" == "main" ]; then
            echo "${{ secrets.KUBECTL_CONFIG }}" | base64 -d > $HOME/.kube/config
          elif [ "${{ matrix.branch }}" == "demo" ]; then
            echo "${{ secrets.KUBECTL_CONFIG_DEMO }}" | base64 -d > $HOME/.kube/config
          fi

      - name: Create k8s ECR secret
        run: |
          kubectl delete secret ecr-secret --ignore-not-found
          kubectl create secret docker-registry ecr-secret \
            --docker-server=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com \
            --docker-username=AWS \
            --docker-password=$(aws ecr get-login-password --region us-west-2) \
            --docker-email=none

      - name: Build, push image, and restart deployment
        run: |
          case ${{ matrix.service }} in
            "frontend")
              image_name="frontend"
              dockerfile="frontend/Dockerfile"
              context="frontend"
              deployment="frontend"
              ;;
            "backend")
              image_name="unlockedv2"
              dockerfile="backend/Dockerfile"
              context="."
              deployment="server"
              ;;
            "middleware")
              image_name="provider_middleware"
              dockerfile="provider-middleware/Dockerfile"
              context="."
              deployment="provider-service"
              ;;
            "crontasks")
              image_name="cron_tasks"
              dockerfile="backend/tasks/Dockerfile"
              context="."
              deployment="cron-tasks"
              ;;
          esac

          if [ "${{ matrix.branch }}" == "main" ]; then
            tag="${{ steps.login-ecr.outputs.registry }}/${image_name}:latest"
          else
            tag="${{ steps.login-ecr.outputs.registry }}/${image_name}:${{ matrix.branch }}"
          fi

          echo "Building and pushing image: $tag"
          docker buildx build --platform linux/amd64 -t=${tag} --push -f ${dockerfile} ${context}

          echo "Restarting deployment: $deployment"
          kubectl rollout restart deployment $deployment
