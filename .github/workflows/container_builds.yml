name: Container ECR build + deploy
on:
  push:
    branches:
      - main
      - demo

permissions:
  id-token: write
  contents: read

jobs:
  setup-env:
    if: github.repository == 'UnlockedLabs/UnlockEdv2' || github.repository == 'PThorpe92/UnlockEdv2'
    runs-on: ubuntu-latest
    outputs:
      frontend_changes: ${{ steps.frontend_changes.outputs.changed }}
      backend_changes: ${{ steps.backend_changes.outputs.changed }}
      middleware_changes: ${{ steps.middleware_changes.outputs.changed }}
      crontasks_changes: ${{ steps.crontasks_changes.outputs.changed }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 3

      - id: frontend_changes
        run: |
          echo "changed=$(git diff --name-only HEAD~1 | grep '^frontend/' | wc -l)" >> $GITHUB_OUTPUT
      - id: backend_changes
        run: |
          echo "changed=$(git diff --name-only HEAD~1 | grep '^backend/' | wc -l)" >> $GITHUB_OUTPUT
      - id: middleware_changes
        run: |
          echo "changed=$(git diff --name-only HEAD~1 | grep '^provider-middleware/' | wc -l)" >> $GITHUB_OUTPUT
      - id: crontasks_changes
        run: |
          echo "changed=$(git diff --name-only HEAD~1 | grep '^backend/tasks' | wc -l)" >> $GITHUB_OUTPUT

      - name: Debug outputs
        run: |
          echo "Frontend changes: ${{ steps.frontend_changes.outputs.changed }}"
          echo "Backend changes: ${{ steps.backend_changes.outputs.changed }}"
          echo "Middleware changes: ${{ steps.middleware_changes.outputs.changed }}"
          echo "Crontasks changes: ${{ steps.crontasks_changes.outputs.changed }}"

  build-and-push:
    if: github.repository == 'UnlockedLabs/UnlockEdv2' || github.repository == 'PThorpe92/UnlockEdv2'
    needs: setup-env
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          aws-region: us-west-2
          mask-aws-account-id: true

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push frontend image
        if: ${{ needs.setup-env.outputs.frontend_changes != '0' }} && github.ref == 'refs/heads/main'
        run: |
          docker buildx build --platform linux/amd64 -t=${{ steps.login-ecr.outputs.registry }}/frontend:latest --push frontend/.

      - name: Build and push backend image
        if: ${{ needs.setup-env.outputs.backend_changes != '0' }} && github.ref == 'refs/heads/main'
        run: |
          docker buildx build --platform linux/amd64 -t=${{ steps.login-ecr.outputs.registry }}/unlockedv2:latest --push  -f backend/Dockerfile .

      - name: Build and push middleware image
        if: ${{ needs.setup-env.outputs.middleware_changes != '0' }} && github.ref == 'refs/heads/main'
        run: |
          docker buildx build --platform linux/amd64 -t=${{ steps.login-ecr.outputs.registry }}/provider_middleware:latest --push -f provider-middleware/Dockerfile .

      - name: Build and push crontasks image
        if: ${{ needs.setup-env.outputs.crontasks_changes != '0' }} && github.ref == 'refs/heads/main'
        run: |
          docker buildx build --platform linux/amd64 -t=${{ steps.login-ecr.outputs.registry }}/cron_tasks:latest --push -f backend/tasks/Dockerfile .

      - name: Restart Demo deployments
        if: github.ref == 'refs/heads/demo'
        env:
          SSH_DEMO: ${{ secrets.SSH_DEMO }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
        run: |
          deployments=()
          [[ "${{ needs.setup-env.outputs.frontend_changes }}" != "0" ]] && deployments+=("frontend")
          [[ "${{ needs.setup-env.outputs.backend_changes }}" != "0" ]] && deployments+=("server")
          [[ "${{ needs.setup-env.outputs.middleware_changes }}" != "0" ]] && deployments+=("provider-service")
          [[ "${{ needs.setup-env.outputs.crontasks_changes }}" != "0" ]] && deployments+=("cron-tasks")
          if [ "${#deployments[@]}" -eq 0 ]; then
            echo "No deployments need restarting."
            exit 0
          fi
          DEPLOYMENTS_ARGS="${deployments[@]}"
          ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no "$SSH_DEMO" "bash -s" <<EOF
            rollout.sh $DEPLOYMENTS_ARGS
          EOF

      - name: restart staging containers
        if: github.ref = 'refs/heads/main'
        env: 
          SSH_STAGING: ${{ secrets.SSH_STAGING }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
        run: |
          deployments=()
          [[ "${{ needs.setup-env.outputs.frontend_changes }}" != "0" ]] && deployments+=("frontend")
          [[ "${{ needs.setup-env.outputs.backend_changes }}" != "0" ]] && deployments+=("server")
          [[ "${{ needs.setup-env.outputs.middleware_changes }}" != "0" ]] && deployments+=("provider-service")
          [[ "${{ needs.setup-env.outputs.crontasks_changes }}" != "0" ]] && deployments+=("cron-tasks")
          if [ "${#deployments[@]}" -eq 0 ]; then
            echo "No deployments need restarting."
            exit 0
          fi
          DEPLOYMENTS_ARGS="${deployments[@]}"
          ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no "$SSH_STAGING" "bash -s" <<EOF
            rollout.sh $DEPLOYMENTS_ARGS
          EOF
